fatfs - a portable fatfs implementation with 
  native support for ATA devices and
  flexiblity to add other block device drivers in a jiffy.
v15Feb2005
C Hanish Menon <hanishkvc>, 2004-2005
License: GNU General Public License (GPL)
======================================================================

The files included as part of it include
* porta library
* blockdev library
* fatfs library
* TiDMxxx support library

The implementation tries to strike a balance between speed and memory.
So there are some restrictions at places whose boundries can be pushed
to either side flexibly as required by changing defines in the code.

This can be used from within a linux application in userspace independent
of the linux kernel support for ATA devices and FatFs. However care should
be taken so that linux kernel doesn't manage theses at the same time. One
way is to tell the kernel hdxyz=none during booting.

The PC support logic doesn't try to achieve best possible PIO speed as 
it would involve setting motherboard chipset specific Cycle Timing setting.
So by default on the PC the speed achieved is only around 3MB/sec. However
making these chipset specific initialization won't be that difficult 
for anyone.



Tests
------
I have tested these logic on 
* a simulated file based Block Device
* HDD of emulators like bosch, qemu and vmware
* HDD of PCs
* HDD and CF of few Arm based Portable Media solutions
Both Fat16 and Fat32 has been tested.

ThankU2Fedtec for some of the embedded systems used for testing.



the Need
---------

The linux fat fs driver reading only 1 sector/cluster at a time, even when
there is a bunch of adjacent clusters that could be read and things made
efficient and faster.

Having access patterns which run in only one direction, and still not
being able to hint the linux fs logic about the same in a useful manner
and get it to do things better.

Wanting to ensure that filesystem is in a consistent state after writes,
in a user controlled predictable manner, so that power failures doesnt mess
with the filesystem.

Wanting to finetune the bus timings and ike out good performance out of file
system access, so that the system is free to do other things fast enough.

Have some fun exploring few ideas wrt filesystems including fat, by starting
from scratch .

Have a portable logic which can be used either in a bootloader or a rtos
or linux, with minimal effort.

Wanting to work with huge files beyond 2|4GB in fat fs, especially in a
closed ecosystem.



Side Notes
-----------

Because of this and few of my other design a new wheel ways, had some fun
discussions with the linux fat fs developer as well as one of the linux
network filters developer, at a later date, when I got a chance to meet them.

Also got a memory cards controller chipset logic to be updated to become more
flexible and faster by getting its logic to become better behaved and adaptable
device on flexible generic memory busses, as well as by ensuring that it uses
principles of double/multi buffering internally to speed up things.



INSTALL
--------
* For building library for use by others
  make release
  cd RELEASEPATH\src
  make -- to build the test application
* For building library and test app for own tests
  make



