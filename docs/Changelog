Changelog - fatfs
C Hanish Menon <hanishkvc>
---------------------------

ToDo
-----
* Setting DevLBA register in 2 phase (ATA-2 specs say so)
  * 1st phase set only the DEV bit
  * 2nd phase also update the LBAAddr bits

12Oct2004
* Added logic to simulate error in loadfat for PARTLYMAPPEDFAT logic
  This inturn will lead to wrong sector number being passed to BlockDev
* Before a cmd is sent to HDD, its checked that BSY or ERR or DRQ bits
  aren't set. However if they are set then SRST (softreset) is used
  to recover the situation if possible.
* Softreset added for bdks
  bdhdd.x uses this.
  bdfile.x makes this a dummy.
  testfat provides option to call it explicitly if required.
* bdfile.x 64bit seek added for large filesystems

11Oct2004
* Support for Mapping FAT into memory in parts as required has been added
  Now there are two FAT loading logic
  * Fully Mapped and * Partly Mapped (Usefull for those large FAT32 FATS)
* bdhdd.x uses altstat register to poll status changes and once found
  reads the status register to inform h/w about host having noticed
  the status change.
  Verification of DRQ during each word transfer (if explicitly forced)
  has been removed
* Check for MBR Startbyte signature as been made optional in partk_get
  cas many mbr's which don't have a load code (or which don't take part
  in bootstrapping of OS) don't have this signature, as its part of the
  load code instructions.
* bdhdd.x cleanup and better error notification
  Also increase in wait counts
* partk_get distinguishes between other errors and NO MBR error
  mount inturn uses this info to decide as to fail or continue
  

10Oct2004
* Made bdhdd.x generic such that it can work with either ide0 or ide1
* bdhdd.x has timeout logic now when waiting for bits to be set or cleared
  Plus few others make it better prepared to handle errors during device
  access
* bdkT maintains 
  * grpId and devId, which
    * bdhdd.x uses for ide0/1 and dev0/1
    * bdfile.x ignores
    fsutils and testfat updated to handle these ids.
  * CMDBR and CNTBR for bdhdd.x for now

09Oct2004
* Found that READSECTORSWITHOUTRETRIES (0x21) not supported
* Also signature in LBAlow, LBAMid, LBAHigh, DEVLBA24, SECCNT not set
  for IDENTIFYDEVICE in Bochs, VMWare
* Updated get_sector logic such that it supports multiple sectors to be 
  read properly even if it exceeds 256 sectors.
  However currently it doesn't handle errors or buggy hardware properly

08Oct2004
* Initial support for get_sector, a simple mistake in code debugged

07Oct2004
* Started preliminary support for PC based HDD (bdhdd.x)

05Oct2004
* Added function pointers to TFat structure so that during fatfs_init
  Proper functions are assigned to these pointers depending on the
  FATFS type i.e 12 or 16 or 32. And thus other parts of the fatfs
  logic are not required to bother about the fatfs type. This is
  the best flexible mechanism that can be put in place other than
  having seperate hardcoded fat12/fat16/fat32 type functions.
  * The low level functions are
    * Loading root dir 
    * Getting a Fat Entry
      * FIXME: In future we can make the FAT table handling flexible
        i.e Either Full FAT table could be in Memory or we could load
	parts of FAT Table as required by updating this function.
  * Updated other parts so that they use this mechanism
* Added support to check BlockDev sector size matches FatFS sector size
* Partiton or Physical volume size is embedded in TFat structure and 
  verified to see that FatFS bootsector doesn't tell that FatFS exceeds
  this.
* active Fat Table is identified for Fat16(implicitly 0) and Fat32(extflags)
* Added support for Fat32 read, directory listing, chdir etc except 
  Write operations(same status as Fat16).  Achieved by providing support 
  for fatfs32_getfatentry and fatfs32_loadrootdir, using simplified 
  generalized mechanism added today.
* Logic to autodetect possible Fat32 FS in a small volume suitable for
  Fat12 or Fat16 added.
* Check for and avoid working on Volume with DiskI/O error during last mount
  or Volume which wasn't Cleanly shut.

04Oct2004
* cycle to stars continues
* Removed the nonportable but fast macros for accessing members 
  of the bootsector.
  These are nonportable as there are fields with wrong alignment (based on
  field size) which processors like ARM/Mips don't support in h/w but would
  require s/w support in OS.
* Partition logic identifies if it has a MBR at hand
  Also it uses a buffer passed to it to read the 0th sector into.
* mount and umount added

30Sep2004
* Incorporated new porta libraries into fatfs
* Made blockdev data and routines into a structure so that it can be
  embedded into Fat structure. Also now a given Fat system could be in 
  any among the many blockdevs in the system.

22july2004
* Made testfat functions use uc pointer as one of their arguments.
  So that we can test/work with multiple fat filesystems in a given run.


21july2004-2200 (what I remember now)
* Interactive menu added to testfat
* Partition support in loadfile functions (i.e adding used partitions baseSec)
* Updated the logic such that they no longer use global structures instead 
  * all fatfs calls use a TFat structure which inturn gets its buffers
    set from a TFatBuffers structure defined by user.
  * and all fatuc calls use the TFatFsUserContext structure which inturn
    as a pointer to the TFat it is using.


20july2004-2300 (what I remember now)
* Added support for reading files with clusSize granularity (loadfileclus).
  Also a separate function is provided so that the application can verify 
  if the buffer it has is ok with this loadfileclus function.
* Added some utility functions for strcpy, memcpy, token parsing
* current path string is maintained in UserContext
* each logic of testfat is timed with added helper routines
* File extraction logic added to testfat
* new dirlisting (inefficient(toShowOthersHowItCouldBe)) logic added



ToDo
------
* Provide util function for strcmp
* make blockdev data and functions part of a struct and have it embedded in
  TFat structure.
* Remove the forced Unicode to Ascii string conversion in getfileinfo
  and provide routine to convert given ascii string to unicode, so that
  we can always maintain unicode string in lfn of TFileInfo.

